install.packages(c("Matrix", "mgcv"), lib="/usr/local/Cellar/r/3.5.3/lib/R/library")
install.packages(c("tidyverse", "tidyr", "magick", "r2stl", "dplyr", "plyr", "shiny", "rgdal", "gdalUtils", "sf"))
install.packages("rgdal")
install.packages("rgdal --with-proj-share=
configure")
install.packages("gdalUtils")
install.packages(rgdal)
install.packages("rgdal")
install.packages("rgdal")
install.packages("aux")
install.packages("auk")
install.packages("gdaltools")
install.packages(c("r2stl", "tigris", "rnaturalearth", "rnaturalearthdata", "raster", "sf"))
install.packages(c("r2stl", sf"))
install.packages(c("r2stl", "sf"))
install.packages("units")
install.packages("units")
install.packages(c("r2stl", "tigris", "rnaturalearth", "rnaturalearthdata", "raster", "sf"))
install.packages("sf")
install.packages("sf")
#Load library
library(raster)
# Libraries
library(r2stl)
library(png)
install.packages("png")
library(imager)
library(magick)
library(shinycssloaders)
library(rgl)
library(shiny)
install.packages(c("imager", "magick", "rgl", "shiny"))
install.packages(c("gdalUtils", "rgdal", "shiny"))
library(shiny); source('git/Shiny-Apps/Docker-App/shiny/KML2SHP-app.R')
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
install.packages('sp', type='source')
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
require(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
require(rgdal)
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
require(rgdal)
install.packages("rgdal")
runApp('git/Shiny-Apps/Docker-App/shiny')
runApp('git/Shiny-Apps/Docker-App/shiny')
install.packages("rgdal")
install.packages('sf')
library(shiny)
ar <- c(1,2,3,4)
runApp(shinyApp(ui, server), port = args[]
ar <- c(1,2,3,4)
ar <- c(1,2,3,4)
ar[0]
ar[1]
runApp('git/Shiny-Apps/Docker-App/shiny')
runApp('git/Shiny-Apps/Docker-App/shiny')
runApp(shinyApp(ui, server), port = 3333)
library(shiny)
# get port arg
args <- commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("Please supply argument '--port' !", call.=FALSE)
} else if (length(args)==1) {
# default output file
args = "arg.txt"
}
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp(shinyApp(ui, server), port = 3333)
library(shiny)
runApp('app.R')
setwd("~/git/Shiny-Apps/Docker-App/shiny")
runApp('app.R')
runApp('app.R')
runApp('app.R')
runApp('app.R')
test_apps <- c('app.R', 'app1.R,', 'app2.R')
port_range <- as.integer(runif(1, min = 3000, max = 9999))
port_range <- as.integer(runif(1, min = 3000, max = 9999))
port_range <- as.integer(runif(1, min = 3000, max = 9999))
# generate port
ActivePorts <- str()
# generate port
ActivePorts <- c()
numports <- length(ActivePorts)
p <- baseport ++ 1
# manage ports
baseport <- 3111
p <- baseport ++ 1
make_port <- function() {
if(length(ActivePorts) == 0) {
p <- baseport ++ 1
return(p)
}
}
make_port()
install.packages("timeDate")
time
time()
date()
Sys.time()
Sys.time(s)
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), %b %d %X)
format(Sys.time(), %b %d)
format(Sys.time(), %b %d)
format(Sys.time(), %b %d)
format(Sys.time(), %b %d %X)
format(Sys.time(), "%b %d %X")
format(Sys.time(), "%X")
format(Sys.time(), '%X')
Sys.time(X)
ActivePorts <- c(,)
ActivePorts <- c(,)
ActivePorts <- c('','')
ActivePorts <- c(int,'')
ActivePorts <- c('','')
ActivePorts ++ c(p,format(Sys.time(), '%X'))
p <- baseport ++ 1
ActivePorts ++ c(p, format(Sys.time(), '%X'))
ActivePorts <- ActivePorts ++ (p, format(Sys.time(), '%X'))
ActivePorts <- ActivePorts ++ c(p, format(Sys.time(), '%X'))
ActivePorts <- ActivePorts + c(p, format(Sys.time(), '%X'))
ActivePorts <- data.frame(c('',''))
ActivePorts <- rbind(ActivePorts, c(p, format(Sys.time(), '%X')))
ActivePorts ++ c(p, format(Sys.time(), '%X')))
ActivePorts ++ c(p, format(Sys.time(), '%X'))
library(shiny)
time()
test_apps <- c('app.R', 'app1.R,', 'app2.R')
# manage ports
baseport <- 3111
ActivePorts <- data.frame(c('',''))
p <- baseport ++ 1
ActivePorts ++ data.frame(ActivePorts, c(p, format(Sys.time(), '%X')))
library(shiny)
time()
test_apps <- c('app.R', 'app1.R,', 'app2.R')
# manage ports
baseport <- 3111
ActivePorts <- data.frame(c('',''))
p <- baseport ++ 1
ActivePorts <- data.frame(ActivePorts, c(p, format(Sys.time(), '%X')))
ActivePorts <- r(ActivePorts, c(p, format(Sys.time(), '%X')))
ActivePorts <- rbind.data.frame(ActivePorts, c(p, format(Sys.time(), '%X')))
ActivePorts <- data.frame(ActivePorts, c(p, format(Sys.time(), '%X')), stringsAsFactors = FALSE)
library(shiny)
time()
test_apps <- c('app.R', 'app1.R,', 'app2.R')
# manage ports
baseport <- 3111
ActivePorts <- data.frame(c('',''))
p <- baseport ++ 1
ActivePorts <- data.frame(ActivePorts, c(p, format(Sys.time(), '%X')), stringsAsFactors = FALSE)
ActivePorts <- data.frame(ActivePorts, data.frame(p, format(Sys.time(), '%X')))
library(shiny)
time()
test_apps <- c('app.R', 'app1.R,', 'app2.R')
# manage ports
baseport <- 3111
ActivePorts <- data.frame(c('',''))
p <- baseport ++ 1
ActivePorts <- data.frame(ActivePorts, data.frame(p, format(Sys.time(), '%X')))
library(shiny)
time()
test_apps <- c('app.R', 'app1.R,', 'app2.R')
# manage ports
baseport <- 3111
ActivePorts <- data.frame(c('',''))
p <- baseport ++ 1
numports <- 0
numports ++ 1
ActivePorts[numports] <- c(p, format(Sys.time(), '%X'))
numports <- numports ++ 1
ActivePorts[numports] <- c(p, format(Sys.time(), '%X'))
View(ActivePorts)
ActivePorts[numports][,1]
ActivePorts[numports][1]
ActivePorts[numports]
ActivePorts[numports][[1]]
ActivePorts[numports][1]
ActivePorts[numports][[1]][1]
p <- ActivePorts[numports][[1]][1] ++ 1
p <- as.integer(ActivePorts[numports][[1]][1]) ++ 1
11111 - 3111
ActivePorts[numports]
ActivePorts[numports][[2]]
ActivePorts[numports][[2]]
ActivePorts[numports][[1]]
ActivePorts[numports][[1]][2]
Sys.time()
t1 <- Sys.time()
t2 <- Sys.time()
t1 - t2
as.numeric(t1 - t2)
60 * 5
BeginClock <- Sys.time()
BeginClock + 20
BeginClock
BeginClock + 20
BeginClock + 20
runApp('manager.R')
runApp('T_ui.R')
runApp('T_ui.R')
runApp('T_ui.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
source('manager.R')
source('manager.R')
source('manager.R')
setwd("~/git/Shiny-Apps/Docker-App/shiny")
runApp('manager.R')
runApp('app.R')
p1 <- make_port()
make_port <- function() {
# max port error:
if (numports >= maxport - baseport) {
print(str('ERROR:  Active ports has exceeded max ports- [ ' ,
str(maxport - baseport),
' ] - abort! '))
}
# first port:
if (numports == 0) {
p <- baseport ++ 1
numports <- numports ++ 1
ActivePorts[numports] <- c(p, format(Sys.time(), '%X'), Sys.time())
# following ports
} else {
p <- as.integer(ActivePorts[numports][[1]][1]) ++ 1
numports <- numports ++ 1
ActivePorts[numports] <- c(p, format(Sys.time(), '%X'), Sys.time())
}
# return port #:
return(p)
}
make_port()
baseport <- 3111
maxport <- 11111
max_elap <- -300 # secs
# init port df
numports <- 0
ActivePorts <- data.frame(c('',''))
make_port()
ActivePorts <- data.frame(c('','',''))
make_port()
make_port()
make_port()
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
pwd
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
str('Rscript app.R ', '3322')
str('Rscript app.R ' + '3322')
cat('Rscript app.R ' + '3322')
cat('Rscript app.R ', '3322')
cat('Rscript app.R', '3322')
runApp('manager.R')
bashArg <- str(cat('Rscript app.R ', '3322'))
bashArg <- as.character('Rscript app.R ', '3322'))
bashArg <- as.character('Rscript app.R ', '3322')
bashArg <- as.character('Rscript app.R '+'3322')
paste('Rscript app.R ', '3322')
bashArg <- paste('Rscript app.R ', '3322')
runApp('manager.R')
runApp()
source('app.R')
# do not runApp() in shiny:
runApp(shinyApp(ui, server), port = args[1])
runApp()
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
install.packages(c("gdalUtils", "rgdal"))
81111 - 3111
8111 -3111
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
runApp('manager.R')
system("./spawn.sh")
runApp('manager.R')
str
runApp('manager.R')
