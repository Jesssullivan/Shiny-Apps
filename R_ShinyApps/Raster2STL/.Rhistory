data
cent_in <- cbind(data, data$coords.x2)
cent_in <-cent_in[!cent_in == ""]
cent_sp <- SpatialPointsDataFrame(centroid(cent_in), df, proj4string=CRS("+proj=longlat +datum=WGS84"))
# write out lat long as a new kml file
results <- writeOGR(cent_sp, dsn = "CentroidKML.kml",
layer = 2, driver="KML")
output$downloadcent <- downloadHandler(filename = function() {
paste("data-", Sys.Date(), ".kml", sep="")
},
content = function(con) {
write(results, con)
})
})
# process kml with layers
apply_iterate <- data.frame(t(sapply(i:it, iterate_layers)))
data <- apply_iterate
# extract centroid with WGS84 CRS
df <- data.frame(1, 1)
data
# process kml with layers
apply_iterate <- data.frame(sapply(i:it, iterate_layers))
data <- apply_iterate
# extract centroid with WGS84 CRS
df <- data.frame(1, 1)
# process kml with layers
apply_iterate <- data.frame(lapply(i:it, iterate_layers))
data <- apply_iterate
# process kml with layers
apply_iterate <- data.frame(t(lapply(i:it, iterate_layers)))
data$
cent_in <- cbind(data, data$coords.x2)
data <- apply_iterate
# process kml with layers
apply_iterate <- data.frame(t(sapply(i:it, iterate_layers)))
data <- apply_iterate
data$geometry
readOGR(apply_iterate)
# process kml with layers
apply_iterate <- data.frame(t(sapply(i:it, iterate_layers)))
# process kml with layers
data <- data.frame(t(sapply(i:it, iterate_layers)))
data[3]
as.table(data)
matrix(data)
# process kml with layers
data <- data.frame(t(matrix(sapply(i:it, iterate_layers))))
data$X108    cent_in <- cbind(data, data$coords.x2)
data$X108
# process kml with layers
data <- data.frame(matrix(sapply(i:it, iterate_layers)))
data$matrix.sapply.i.it..iterate_layers..
# process kml with layers
data <- t(matrix(sapply(i:it, iterate_layers)))
data
# process kml with layers
data <- t(as.matrix(sapply(i:it, iterate_layers)))
# process kml with layers
data <- data.frame(t(as.matrix(sapply(i:it, iterate_layers))))
# process kml with layers
data <- data.frame(as.matrix(sapply(i:it, iterate_layers)))
# process kml with layers
data <- data.frame(as.matrix(sapply(i:it, iterate_layers)))
# process kml with layers
data <- t(data.frame(as.matrix(sapply(i:it, iterate_layers))))
# process kml with layers
data <- data.frame(as.matrix(sapply(i:it, iterate_layers)))
data[1]
data$geometry
a <- data.frame(data$[1])
a <- data.frame(data[1])
a <- a$geometry
a <- unlist(data[1])
a
a <- data.frame(unlist(data[1]))
View(a)
# process kml with layers
data <- data.frame(unlist(sapply(i:it, iterate_layers)))
# process kml with layers
data <- data.frame(as.matrix(sapply(i:it, iterate_layers)))
# process kml with layers
data <- data.frame(sapply(i:it, iterate_layers))
lengthdata <- length(data)
lengthdata <- as.numeric(length(data))
get_cent <- function(i) {
getGeo <- data.frame(unlist(data[i]))
coords <- cbind(getGeo[X1.geometry1], getGeo[X1.geometry2])
return(coords)
}
cent_in <- sapply(1:lengthdata, get_cent)
get_cent <- function(i) {
getGeo <- data.frame(unlist(data[i]))
coords <- cbind(getGeo[X1.geometry1], getGeo[X1.geometry2])
return(coords)
}
cent_in <- sapply(1:lengthdata, get_cent)
coords <- cbind(getGe$X1.geometry1, getGeo$X1.geometry2)
get_cent <- function(i) {
getGeo <- data.frame(unlist(data[i]))
coords <- cbind(getGeo$X1.geometry1, getGeo$X1.geometry2)
return(coords)
}
cent_in <- sapply(1:lengthdata, get_cent)
get_cent <- function(i) {
getGeo <- data.frame(unlist(data[i]))
coords <- cbind(getGeo$X1.geometry1, getGeo$X1.geometry2)
return(coords)
}
cent_in <- sapply(1:lengthdata, get_cent)
i <- 1:lengthdata
cent_in <- sapply(i, get_cent)
View(cent_in)
getGeo <- data.frame(unlist(data[2]))
coords <- cbind(getGeo$X1.geometry1, getGeo$X1.geometry2)
get_cent <- function(i) {
getGeo <- data.frame(unlist(data[i]))
coords <- cbind(getGeo[7], getGeo[8])
return(coords)
}
i <- 1:lengthdata
cent_in <- sapply(i, get_cent)
get_cent <- function(i) {
getGeo <- data.frame(unlist(data[i]))
coords <- cbind(getGeo[7,], getGeo[8,])
return(coords)
}
i <- 1:lengthdata
cent_in <- sapply(i, get_cent)
View(cent_in)
cent_in <- t(sapply(i, get_cent))
View(cent_in)
coords <- getGeo[X1.geometry1]
coords <- getGeo$X1.geometry1
getGeo <- unlist(data[i])
getGeo <- data.frame(unlist(data[i]), stringsAsFactors = FALSE)
coords <- getGeo$unlist.data.i..
getGeo <- data.frame(t(unlist(data[i]), stringsAsFactors = FALSE))
getGeo <- data.frame(t(unlist(data[i])), stringsAsFactors = FALSE)
getGeo <- as.table(unlist(data[1]))
getGeo <- as.table(unlist(data[1]))
getGeo <- unlist(data[1])
getGeo <- t(data[1])
getGeo <- data[1]
getGeo <- as.table(data[1])
getGeo <- data.frame(data[1])
getGeo <-matrix(data[1])
getGeo <-data.frame(matrix(data[1]))
getGeo <-as.table(matrix(data[1]))
getGeo <-as.table(matrix(data[1]))
getGeo
getGeo <-as.table(as.matrix(data[1]))
getGeo
getGeo[3]
getGeo <-as.table(t(as.matrix(data[1])))
getGeo[3]
getGeo
getGeo <- as.table(t(as.matrix(data[1])))
getGeo
getGeo[3,1]
getGeo[3]
unlist(getGeo[3])
getGeo <- as.table(t(as.matrix(data[1])))
getGeo(unlist(getGeo[3]))
getGeo <- (unlist(getGeo[3]))
cbind(getGeo[1], getGeo[2])
get_cent <- function(i) {
getGeo <- as.table(t(as.matrix(data[1])))
getGeo <- (unlist(getGeo[3]))
coords <- cbind(getGeo[1], getGeo[2])
return(coords)
}
i <- 1:lengthdata
cent_in <- sapply(i, get_cent)
View(cent_in)
cent_in <- t(sapply(i, get_cent))
View(cent_in)
cent_in <- data.frame(t(sapply(i, get_cent)))
cent_sp <- SpatialPointsDataFrame(centroid(cent_in), df, proj4string=CRS("+proj=longlat +datum=WGS84"))
View(cent_in)
get_cent <- function(i) {
getGeo <- as.table(t(as.matrix(data[i])))
getGeo <- (unlist(getGeo[3]))
coords <- cbind(getGeo[1], getGeo[2])
return(coords)
}
i <- 1:lengthdata
cent_in <- data.frame(t(sapply(i, get_cent)))
cent_sp <- SpatialPointsDataFrame(centroid(cent_in), df, proj4string=CRS("+proj=longlat +datum=WGS84"))
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
shiny::runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
#Global packages for KML Search and Convert
require(shiny)
require(rgdal)
require(sf)
require(plyr)
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
require(sf)
require(GEOmap)
library(sp)
require(geosphere)
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
server <- function(input, output) {
observeEvent(input$go, {
dat <- input$file
datum <- dat$datapath
# read kml section
kml_layers <- ogrListLayers(datum)
kml_cleaned <- kml_layers[!(duplicated(kml_layers))]
lengthCleaned <- as.numeric(length(kml_cleaned))
it <- as.numeric(length(kml_cleaned))
iterate_layers <- function(i){
layer_i <- st_read(datum, kml_cleaned[i])
print(layer_i)
return(layer_i)
}
st_read(datum, "CSWA Y/O-A")
# process kml with layers
data <- data.frame(sapply(1:it, iterate_layers))
# extract centroid with WGS84 CRS
df <- data.frame(1, 1)
lengthdata <- as.numeric(length(data))
get_cent <- function(i) {
getGeo <- as.table(t(as.matrix(data[i])))
getGeo <- (unlist(getGeo[3]))
coords <- cbind(getGeo[1], getGeo[2])
return(coords)
}
i <- 1:lengthdata
cent_in <- data.frame(t(sapply(i, get_cent)))
cent_sp <- SpatialPointsDataFrame(centroid(cent_in), df, proj4string=CRS("+proj=longlat +datum=WGS84"))
# write out lat long as a new kml file
results <- writeOGR(cent_sp, dsn = "Cent.kml",
layer = 1, driver="KML")
output$downloadcent <- downloadHandler(filename = function() {
paste("Centroid-", Sys.Date(), ".kml", sep="")
},
content = function(con) {
write(results, con)
})
})
}
runApp('Downloads/rstudio-export (1)/Centroid_KML')
server <- function(input, output) {
observeEvent(input$go, {
dat <- input$file
datum <- dat$datapath
# read kml section
kml_layers <- ogrListLayers(datum)
kml_cleaned <- kml_layers[!(duplicated(kml_layers))]
lengthCleaned <- as.numeric(length(kml_cleaned))
it <- as.numeric(length(kml_cleaned))
iterate_layers <- function(i){
layer_i <- st_read(datum, kml_cleaned[i])
print(layer_i)
return(layer_i)
}
st_read(datum, "CSWA Y/O-A")
# process kml with layers
data <- data.frame(sapply(1:it, iterate_layers))
# extract centroid with WGS84 CRS
df <- data.frame(1, 1)
lengthdata <- as.numeric(length(data))
get_cent <- function(i) {
getGeo <- as.table(t(as.matrix(data[i])))
getGeo <- (unlist(getGeo[3]))
coords <- cbind(getGeo[1], getGeo[2])
return(coords)
}
i <- 1:lengthdata
cent_in <- data.frame(t(sapply(i, get_cent)))
cent_sp <- SpatialPointsDataFrame(centroid(cent_in), df, proj4string=CRS("+proj=longlat +datum=WGS84"))
# write out lat long as a new kml file
results <- writeOGR(cent_sp, dsn = "Cent.kml",
layer = 2, driver="KML")
output$downloadcent <- downloadHandler(filename = function() {
paste("Centroid-", Sys.Date(), ".kml", sep="")
},
content = function(con) {
write(results, con)
})
})
}
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
filename <- as.character(filename)
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
runApp('Downloads/rstudio-export (1)/Centroid_KML')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jessdev',
token='ECD63283D95DA2308DC118D8CBCEFE2F',
secret='A96ttYTAbftHQ677La7fRvIWoerMInFCCjGyF7b9')
library(rsconnect)
rsconnect::deployApp('/Users/Jess/Documents/Shiny-Apps/KML-Centroid-Generator')
rsconnect::deployApp('/Users/Jess/Documents/Shiny-Apps/KML-Centroid-Generator')
df <- c(1,1)
df <- matrix(1,1)
library(rsconnect)
rsconnect::deployApp('/Users/Jess/Documents/Shiny-Apps/KML-Centroid-Generator')
shiny::runApp('Documents/Shiny-Apps/KML-Centroid-Generator')
runApp('Documents/Shiny-Apps/KML-Centroid-Generator')
runApp('Documents/Shiny-Apps/KML-Centroid-Generator')
library(rsconnect)
rsconnect::deployApp('/Users/Jess/Documents/Shiny-Apps/KML-Centroid-Generator')
library(rsconnect)
year <- c(2000 ,   2001  ,  2002  ,  2003 ,   2004)
rate <- c(9.34 ,   8.50  ,  7.62  ,  6.93  ,  6.60)
plot(year,rate,
main="Commercial Banks Interest Rate for 4 Year Car Loan",
sub="http://www.federalreserve.gov/releases/g19/20050805/")
cor(year, rate)
fit <- lm(rate ~ year)
fit
c(1,2,3,4,4,4,4)
dat <- c(1,2,3,4,4,4,4)
pnorm(dat)
dat_length <- as.numeric(length(dat))
dat <- rbind(c(1,2,3,7), c(4,4,4,4))
dat <- data.frame(rbind(c(1,2,3,7), c(4,4,4,4)))
View(dat)
dat[2]
dat <- data.frame(cbind(c(1,2,3,7), c(3,4,4,4)))
dat[2]
dat_length <- as.numeric(length(dat))
dat_length <- as.numeric(count(dat))
dat_length <- as.numeric(length(dat))
dat <- data.frame(cbind(c(1,2,3,7), c(3,4,4,4)))
dat
dat <- data.frame(rbind(c(1,2,3,7), c(3,4,4,4)))
dat
dat_length <- as.numeric(length(dat))
dat[1,]
setwd("~/EBPP-master/EBPP-master")
#
datum <- "/Users/Jess/PycharmProjects/StoryMapStuffs/Berlin, NH.kml"
kml_cleaned <- ogrListLayers(datum)
#library(shiny)
library(rgdal)
library(sf)
library(geosphere)
library(plyr)
library(tidyverse)
#
datum <- "/Users/Jess/PycharmProjects/StoryMapStuffs/Berlin, NH.kml"
kml_cleaned <- ogrListLayers(datum)
it <- as.numeric(length(kml_cleaned))
iterate_layers <- function(i){
layer_i <- st_read(datum, kml_cleaned[i])
print(layer_i)
return(layer_i)
}
# process kml with layers
rate <- 1:it
data <- data.frame(t(data.frame(sapply(rate, iterate_layers))))
data
data$Description
data <- as.arrayt(data.frame(sapply(rate, iterate_layers))))
data <- as.array(t(data.frame(sapply(rate, iterate_layers))))
dat
data
data <- as.array(sapply(rate, iterate_layers))
data
data <- data.frame(as.array(sapply(rate, iterate_layers)), stringsAsFactors = FALSE)
data
data <- sapply(rate, iterate_layers)
data
unlist(data)
dat <- unlist(data)
data <- sapply(rate, iterate_layers)
data <- as.array(t(data.frame(sapply(rate, iterate_layers))))
data[2]
data[3]
data[4]
data[5]
data[5,1]
data
data$Description
data[2]
data <- t(data.frame(sapply(rate, iterate_layers)))
data[2]
data
data <- t(sapply(rate, iterate_layers))
data
iterate_layers <- function(i){
layer_i <- unlist(st_read(datum, kml_cleaned[i]))
return(layer_i)
}
# process kml with layers
rate <- 1:it
data <- t(sapply(rate, iterate_layers))
data
data <- sapply(rate, iterate_layers)
data
iterate_layers <- function(i){
layer_i <- unlist(st_read(datum, kml_cleaned[i])[2])
return(layer_i)
}
# process kml with layers
rate <- 1:it
data <- sapply(rate, iterate_layers)
data
layer_i <- unlist(st_read(datum, kml_cleaned[3]))
layer_i <- readOGR(datum, kml_cleaned[3])
layer_i <- readOGR(datum, kml_cleaned[5])
layer_i <- readOGR(datum, kml_cleaned[11])
layer_i <- readOGR(datum, kml_cleaned[9])
iterate_layers <- function(i){
layer_i <- readOGR(datum, kml_cleaned[i])
print(layer_i)
return(layer_i)
}
# process kml with layers
rate <- 1:it
data <- sapply(rate, iterate_layers)
data
View(data)
iterate_layers <- function(i){
layer_i <- st_read(datum, kml_cleaned[i])
print(layer_i)
return(layer_i)
}
# process kml with layers
rate <- 1:it
data <- sapply(rate, iterate_layers)
data
data <- sapply(rate, iterate_layers)
lengthdata <- as.numeric(length(data))
data <- data.frame(sapply(rate, iterate_layers))
# pull lat/lon function
func <- function(i) {
df <- data$X1
print(df)
#return(coords)
}
cent_in <- sapply(1:10, func)
# pull lat/lon function
func <- function(i) {
df <- data$X1
print(df)
return(df)
}
df <- sapply(1:10, func)
df <- data.frame(sapply(1:10, func), stringsAsFactors = FALSE)
source('/Volumes/Glyph_1TB/odrive/Amazon Cloud Drive/JessDev/tests.R')
library(tidyverse)
install.packages(c("foreign", "MASS", "survival"))
install.packages(c("tidyverse", "kml", "rgdal"))
library(shiny)
library(rgdal)
library(sf)
library(geosphere)
library(plyr)
library(tidyverse)
install.packages(c("shiny", "rgdal", "sf", "geosphere", "plyr", "tidyverse"))
install.packages(c("shiny", "rgdal", "sf", "geosphere", "plyr", "tidyverse"))
library(shiny)
library(rgdal)
library(sf)
library(geosphere)
library(plyr)
library(tidyverse)
runApp('Desktop/work/Shiny-Apps-master/Centroid_KML')
runApp('Desktop/work/Shiny-Apps-master/Centroid_KML')
runApp('Desktop/work/Shiny-Apps-master/Centroid_KML')
runApp('Desktop/work/Shiny-Apps-master/Centroid_KML')
runApp('Desktop/work/Shiny-Apps-master/Centroid_KML')
runApp('Desktop/work/Shiny-Apps-master/Centroid_KML')
runApp('Downloads/sample-apps 3/Centroid_KML')
install.packages("parallelDist", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
shiny::runApp('Desktop/LegitGIT/Shiny-Apps/Raster2STL')
im <- image
image <- image_read("https://raw.githubusercontent.com/Jesssullivan/GIS_Shortcuts/master/Raster_To_STL/Sample2.jpeg")
im <- image
z <- im[, , 1, 1]
z <- im
x <- 1:length(im[, 1])
x <- 1:length(im[, 1])
im <- image_read("tmp.jpeg")
setwd("~/Desktop/LegitGIT/Shiny-Apps/Raster2STL")
im <- image_read("tmp.jpeg")
im <- image_read("tmp.jpeg")
z <- im
x <- 1:length(im[, 1])
im
runApp()
runApp()
runApp()
runApp()
runApp()
