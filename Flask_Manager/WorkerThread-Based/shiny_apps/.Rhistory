da <- lapply(FUN = iterate_layers, rate)
dat <- data.frame(ldply(da))
da <- lapply(FUN = iterate_layers, rate)
dat <- data.frame(ldply(da))
na.omit(dat)
kw1 <- contains(param1, vars = dat$description)
kw2 <- contains(param2, vars = dat$description)
found <- c(kw1, kw2)
print(length(found))
print(length(it))
data <- dat[found,]
print(length(data))
x <- data.frame(matrix(ncol = 2))
names(x)[1] <- 'lat'
names(x)[2] <- 'lon'
for (r in 1:length(found)) {
x = rbind(x, c(dat[found,]$geometry[[r]][1], dat[found,]$geometry[[r]][2]))
}
x <- na.omit(x)
data <- SpatialPointsDataFrame(data[1:2], coords = x)
proj4string(data) <- CRS("+init=epsg:24383")
writeOGR(data, layer = '', driver = 'KML', output)
z <- 'git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps/Full_6.20.18-KCP_JM.kml'
args <- commandArgs(trailingOnly = TRUE)
input <- args[1]  # file path from flask
output <- args[2]  # output directory
param1 <- args[3]
param2 <- args[4]
param1 <- 'nest'
param2 <- 'female'
datum <- z
kml_cleaned <- ogrListLayers(datum)
it <- as.numeric(length(kml_cleaned))
iterate_layers <- function(i){
layer_i <- st_read(datum, kml_cleaned[i])
return(layer_i)
}
rate <- 1:it
#Global packages for KML Search and Convert
library(rgdal)
library(plyr)
library(dplyr)
library(tidyverse)
library(data.table)
library(sf)
library(sp)
library(raster)
library(gdalUtils)
setwd('~')
z <- 'git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps/Full_6.20.18-KCP_JM.kml'
args <- commandArgs(trailingOnly = TRUE)
input <- args[1]  # file path from flask
output <- args[2]  # output directory
param1 <- args[3]
param2 <- args[4]
param1 <- 'nest'
param2 <- 'female'
datum <- z
kml_cleaned <- ogrListLayers(datum)
it <- as.numeric(length(kml_cleaned))
iterate_layers <- function(i){
layer_i <- st_read(datum, kml_cleaned[i])
return(layer_i)
}
rate <- 1:it
da <- lapply(FUN = iterate_layers, rate)
dat <- data.frame(ldply(da))
na.omit(dat)
kw1 <- contains(param1, vars = dat$description)
kw2 <- contains(param2, vars = dat$description)
found <- c(kw1, kw2)
print(length(found))
n <- length(found))
n <-length(found)
n <-length(found)
data <- dat[found,]
print(length(data))
x <- data.frame(matrix(ncol = 2))
names(x)[1] <- 'lat'
names(x)[2] <- 'lon'
for (r in 1:n) {
x = rbind(x, c(dat[found,]$geometry[[r]][1], dat[found,]$geometry[[r]][2]))
}
View(x)
x <- na.omit(x)
if (file.exists(output)) {
file.remove(output)
}
for (r in 1:n) {
print(data$geometry$r[1])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
print(data$geometry[r][1])
for (r in 1:n) {
print(data$geometry[r][1])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry[r,1][1])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry[r,1])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry[r])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry[r][1])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry[[r]][1])
#x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry[[r]][1])
x = rbind(x, c(data$geometry$r[1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry$r[1])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data$geometry$r)
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
print(data$geometry)
data <- dat[found,]
View(data)
for (r in 1:n) {
print(data[-1])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data[-2])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data[r,-2])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data[r,-1])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(data[r,12])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data[r,12]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
print(unlist(data$geometry[r][1]))
for (r in 1:n) {
print(unlist(data$geometry[r][1]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[r][2]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[r][1][1]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[r][1][2]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[r,1]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[1]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[r]))
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
print(unlist(data$geometry[r])[1])
#x = rbind(x, c(data$geometry[r][1], data$geometry[r][2]))
}
for (r in 1:n) {
x = rbind(x, c(unlist(data$geometry[r])[1], unlist(data$geometry[r])[2]))
}
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
library(r2stl)
library(png)
library(magick)
library(gdalUtils)
library(imager)
server <- function(input, output) {
gdal_translate(input, paste0(dirname(input), '/tmp.png'), expand='grey')
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
im <- load.image(paste0(dirname(input), '/tmp.png'))
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = output, object.name = "raster2stl")
}
# server(input, output)
server('dem31.dem', 'output.stl')
server <- function(input, output) {
gdal_translate(input, paste0(dirname(input), '/tmp.png'), expand="grey")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
im <- load.image(paste0(dirname(input), '/tmp.png'))
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = output, object.name = "raster2stl")
}
# server(input, output)
server('dem31.dem', 'output.stl')
server <- function(input, output) {
gdal_translate(input, paste0(dirname(input), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
im <- load.image(paste0(dirname(input), '/tmp.png'))
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = output, object.name = "raster2stl")
}
# server(input, output)
server('dem31.dem', 'output.stl')
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
server <- function(input, output) {
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
gdal_translate(input, paste0(dirname(input), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
im <- load.image(paste0(dirname(input), '/tmp.png'))
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = output, object.name = "raster2stl")
}
# server(input, output)
server('dem31.dem', 'output.stl')
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem31.dem'
file.exists(input)
paste0(dirname(input)
)
gdal_translate(input, 'tmp.png', expand="gray")
gdal_translate(input, 'tmp.png', expand="gray", b=1)
gdal_translate(input, 'tmp.png', expand="gray", b=2)
file.exists(input)
gdal_translate(input, out'tmp.png', expand="gray", b=0)
gdal_translate(input, 'tmp.png', expand="gray", b=0)
file.exists('tmp.png')
input
file.exists(input)
file.create('tmp.png')
gdal_translate(input, 'tmp.png', expand="gray")
gdal_translate(input, 'tmp.png')
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, 'tmp.png')
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='tif', 'tmp.tif', outsize = c(100,100))
gdal_translate(input, of='tiff', 'tmp.tif', outsize = c(100,100))
gdal_translate(input, of='PNG', 'tmp.tif', outsize = c(100,100))
gdal_translate(input, of='PNG', 'tmp.png', outsize = c(100,100))
file.create('tmp.png')
gdal_translate(input, of='PNG', 'tmp.png', outsize = c(100,100))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', 'tmp.png', outsize = c(xsize[20],ysize[20]))
gdal_translate(input, of='PNG', 'tmp.png', outsize = c(200,200))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- image_read('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
gdal_translate(input, of='PNG', 'tmp.png', outsize = c(200,200))
gdal_translate(input, of='PNG', ot='UInt16' 'tmp.png', outsize = c(200,200))
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', outsize = c(200,200))
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', outsize = c(200,200))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', tr="cubic", tr = c(300,300))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', tr="cubic", tr = c(100,100))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", tr=c(100,100))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", tr=c(10,10))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", outsize=c(10,10))
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", outsize=c(200,200))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
#Global packages for STL Converter (raster2stl)
library(r2stl)
library(png)
library(magick)
library(gdalUtils)
library(imager)
args <- commandArgs(trailingOnly = TRUE)
input <- args[1]  # file path from flask
output <- args[2]  # output directory
print(file.path(input))
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", outsize=c(200,200))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", outsize=c(100,100))
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", outsize=c(100,100))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="cubic", outsize=c(40,40))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
z <- im[, , 1, 1] / 4
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
z <- im[, , 1, 1] / 10
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
z <- im[, , 1/10, 1]
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
setwd("~/git/Shiny-Apps/Flask_Manager/WorkerThread-Based/shiny_apps")
input <- 'dem119.dem'
file.exists(input)
file.create('tmp.png')
gdal_translate(input, of='PNG', ot='UInt16', 'tmp.png', r="average", outsize=c(40,40))
# gdal_translate(input, ), '/tmp.png'), expand="gray")
#image = image_read(paste0(dirname(input), '/tmp.tif'))
#imag <- image_convert(image, format = "png", colorspace = "gray")
#image_write(imag, paste0(dirname(input), '/tmp.png'))
#    im <- load.image(paste0(dirname(input), '/tmp.png'))
im <- load.image('tmp.png')
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
z <- im[, , 1, 1] / 100
x <- 1:length(im[, 1, 1, 1])
y <- 1:length(im[1, , , 1])
r2stl(x, y, z, filename = 'output.stl', object.name = "raster2stl")
z <- im[, , 1, 1]
x <- 1:length(im[, 1, 1, 1])
